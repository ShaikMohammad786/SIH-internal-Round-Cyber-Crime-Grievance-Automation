import React, { useState, useEffect } from 'react';
import { userProfilesAPI } from '../utils/userProfilesAPI';
import './CRPCDocumentsModal.css';

const CRPCDocumentsModal = ({ isOpen, onClose, caseId }) => {
  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const getAuthorityEmail = (authority) => {
    const emails = {
      telecom: 'telecom@fraud.gov.in',
      banking: 'banking@fraud.gov.in',
      nodal: 'nodal@fraud.gov.in'
    };
    return emails[authority] || 'Unknown';
  };

  useEffect(() => {
    if (isOpen && caseId) {
      loadCRPCDocuments();
    }
  }, [isOpen, caseId]);

  // Refresh data when modal is opened
  useEffect(() => {
    if (isOpen) {
      loadCRPCDocuments();
    }
  }, [isOpen]);

  const loadCRPCDocuments = async () => {
    try {
      setLoading(true);
      setError('');
      
      const response = await userProfilesAPI.getCRPCDocuments(caseId);
      if (response.success) {
        setDocuments(response.data.documents || []);
      } else {
        setError(response.message || 'Failed to load CRPC documents');
      }
    } catch (error) {
      console.error('Error loading CRPC documents:', error);
      setError('Failed to load CRPC documents');
    } finally {
      setLoading(false);
    }
  };

  const downloadDocument = async (documentId) => {
    try {
      const response = await fetch(`/api/crpc/download/${documentId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `91CRPC_${documentId}.pdf`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
      } else {
        const errorData = await response.json();
        alert('Failed to download document: ' + (errorData.message || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error downloading document:', error);
      alert('Failed to download document: ' + error.message);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="crpc-documents-modal">
        <div className="modal-header">
          <h2>üìã 91 CrPC Documents</h2>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>
        
        <div className="modal-content">
          {loading && (
            <div className="loading-container">
              <div className="loading-spinner"></div>
              <p>Loading documents...</p>
            </div>
          )}
          
          {error && (
            <div className="error-container">
              <div className="error-icon">‚ö†Ô∏è</div>
              <p>{error}</p>
              <button className="retry-btn" onClick={loadCRPCDocuments}>
                Retry
              </button>
            </div>
          )}
          
          {!loading && !error && documents.length === 0 && (
            <div className="empty-container">
              <div className="empty-icon">üìÑ</div>
              <p>No 91 CrPC documents generated yet</p>
            </div>
          )}
          
          {!loading && !error && documents.length > 0 && (
            <div className="documents-list">
              {documents.map((doc, index) => (
                <div key={doc._id || index} className="document-item">
                  <div className="document-info">
                    <div className="document-header">
                      <h3>üìã {doc.documentNumber}</h3>
                      <span className="document-status status-{doc.status}">
                        {doc.status}
                      </span>
                    </div>
                    <div className="document-details">
                      <p><strong>Generated:</strong> {new Date(doc.generatedAt).toLocaleString()}</p>
                      <p><strong>Generated By:</strong> {doc.generatedBy?.name || 'System'}</p>
                      <p><strong>Case ID:</strong> {doc.caseIdString}</p>
                    </div>
                    
                    {doc.recipients && (
                      <div className="email-recipients">
                        <h4>üìß Email Recipients:</h4>
                        <div className="recipients-list">
                          {Object.entries(doc.recipients).map(([authority, details]) => (
                            <div key={authority} className="recipient-item">
                              <span className="authority-name">{authority.toUpperCase()}</span>
                              <span className="authority-email">{details.email || getAuthorityEmail(authority)}</span>
                              <span className={`email-status status-${details.status || 'sent'}`}>
                                {details.status || 'sent'}
                              </span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div className="document-actions">
                    <button 
                      className="download-btn"
                      onClick={() => downloadDocument(doc._id)}
                    >
                      üì• Download PDF
                    </button>
                    <button 
                      className="view-btn"
                      onClick={() => window.open(`/api/crpc/${doc._id}`, '_blank')}
                    >
                      üëÅÔ∏è View Online
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CRPCDocumentsModal;
