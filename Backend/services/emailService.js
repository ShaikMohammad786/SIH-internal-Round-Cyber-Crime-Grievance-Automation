const nodemailer = require('nodemailer');
const path = require('path');

// Load .env file from the correct path
require('dotenv').config({ path: path.join(__dirname, '../.env') });

// Environment variables are loaded from .env file

// Environment variables loaded above

// Email configuration - using environment variables
const emailConfig = {
  host: process.env.SMTP_HOST || 'smtp.gmail.com',
  port: parseInt(process.env.SMTP_PORT) || 587,
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.SMTP_USER || 'skmohammad378@gmail.com',
    pass: process.env.SMTP_PASS || 'ulnaqrmqcxoekstx'
  },
  tls: {
    rejectUnauthorized: false
  }
};

// Create transporter
const transporter = nodemailer.createTransport(emailConfig);

// Email templates
const emailTemplates = {
  telecom: {
    subject: 'URGENT: 91 CrPC Notice - Telecom Fraud Case',
    template: (caseData, scammerData) => `
Dear Telecom Regulatory Authority,

This is an automated 91 CrPC notice generated by the FraudLens system for immediate investigation of telecom fraud.

CASE DETAILS:
- Case ID: ${caseData.caseId}
- Victim: ${caseData.user?.name} (${caseData.user?.email})
- Amount Lost: ‚Çπ${caseData.amount?.toLocaleString() || '0'}
- Incident Date: ${new Date(caseData.incidentDate).toLocaleDateString()}
- Scammer Phone: ${scammerData?.phoneNumber || 'Not provided'}

VICTIM DETAILS FROM FORM:
- Full Name: ${caseData.formData?.personalInfo?.firstName || ''} ${caseData.formData?.personalInfo?.lastName || ''}
- Phone: ${caseData.formData?.contactInfo?.phone || 'Not provided'}
- Email: ${caseData.formData?.contactInfo?.email || 'Not provided'}
- Address: ${caseData.formData?.addressInfo?.currentAddress?.street || 'Not provided'}, ${caseData.formData?.addressInfo?.currentAddress?.city || ''}, ${caseData.formData?.addressInfo?.currentAddress?.state || ''}
- Aadhaar: ${caseData.formData?.governmentIds?.aadhaarNumber || 'Not provided'}
- PAN: ${caseData.formData?.governmentIds?.panNumber || 'Not provided'}

LEGAL NOTICE:
This notice is issued under Section 91 of the Code of Criminal Procedure, 1973, requiring immediate investigation and action within 48 hours.

Please acknowledge receipt and provide updates on the investigation.

FraudLens System
Cyber Crime Division
    `
  },
  banking: {
    subject: 'URGENT: 91 CrPC Notice - Banking Fraud Case',
    template: (caseData, scammerData) => `
Dear Banking Authority,

This is an automated 91 CrPC notice generated by the FraudLens system for immediate investigation of banking fraud.

CASE DETAILS:
- Case ID: ${caseData.caseId}
- Victim: ${caseData.user?.name} (${caseData.user?.email})
- Amount Lost: ‚Çπ${caseData.amount?.toLocaleString() || '0'}
- Incident Date: ${new Date(caseData.incidentDate).toLocaleDateString()}
- Scammer Bank Account: ${scammerData?.bankAccount || 'Not provided'}
- Scammer UPI ID: ${scammerData?.upiId || 'Not provided'}

VICTIM DETAILS FROM FORM:
- Full Name: ${caseData.formData?.personalInfo?.firstName || ''} ${caseData.formData?.personalInfo?.lastName || ''}
- Phone: ${caseData.formData?.contactInfo?.phone || 'Not provided'}
- Email: ${caseData.formData?.contactInfo?.email || 'Not provided'}
- Address: ${caseData.formData?.addressInfo?.currentAddress?.street || 'Not provided'}, ${caseData.formData?.addressInfo?.currentAddress?.city || ''}, ${caseData.formData?.addressInfo?.currentAddress?.state || ''}
- Aadhaar: ${caseData.formData?.governmentIds?.aadhaarNumber || 'Not provided'}
- PAN: ${caseData.formData?.governmentIds?.panNumber || 'Not provided'}

LEGAL NOTICE:
This notice is issued under Section 91 of the Code of Criminal Procedure, 1973, requiring immediate investigation and action within 48 hours.

Please acknowledge receipt and provide updates on the investigation.

FraudLens System
Cyber Crime Division
    `
  },
  nodal: {
    subject: 'URGENT: 91 CrPC Notice - Cyber Crime Case',
    template: (caseData, scammerData) => `
Dear Nodal Officer,

This is an automated 91 CrPC notice generated by the FraudLens system for immediate investigation of cyber crime.

CASE DETAILS:
- Case ID: ${caseData.caseId}
- Victim: ${caseData.user?.name} (${caseData.user?.email})
- Amount Lost: ‚Çπ${caseData.amount?.toLocaleString() || '0'}
- Incident Date: ${new Date(caseData.incidentDate).toLocaleDateString()}
- Case Type: ${caseData.caseType}

VICTIM DETAILS FROM FORM:
- Full Name: ${caseData.formData?.personalInfo?.firstName || ''} ${caseData.formData?.personalInfo?.lastName || ''}
- Phone: ${caseData.formData?.contactInfo?.phone || 'Not provided'}
- Email: ${caseData.formData?.contactInfo?.email || 'Not provided'}
- Address: ${caseData.formData?.addressInfo?.currentAddress?.street || 'Not provided'}, ${caseData.formData?.addressInfo?.currentAddress?.city || ''}, ${caseData.formData?.addressInfo?.currentAddress?.state || ''}
- Aadhaar: ${caseData.formData?.governmentIds?.aadhaarNumber || 'Not provided'}
- PAN: ${caseData.formData?.governmentIds?.panNumber || 'Not provided'}

SCAMMER DETAILS:
- Name: ${scammerData?.name || 'Unknown'}
- Phone: ${scammerData?.phoneNumber || 'Not provided'}
- Email: ${scammerData?.email || 'Not provided'}
- UPI ID: ${scammerData?.upiId || 'Not provided'}
- Bank Account: ${scammerData?.bankAccount || 'Not provided'}

LEGAL NOTICE:
This notice is issued under Section 91 of the Code of Criminal Procedure, 1973, requiring immediate investigation and action within 48 hours.

Please acknowledge receipt and provide updates on the investigation.

FraudLens System
Cyber Crime Division
    `
  }
};

// Send email function
async function sendEmail(to, subject, html, attachments = []) {
  try {
    const mailOptions = {
      from: `"FraudLens System" <${emailConfig.auth.user}>`,
      to: to,
      subject: subject,
      html: html,
      attachments: attachments
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('Email sent successfully:', result.messageId);
    return {
      success: true,
      messageId: result.messageId,
      to: to
    };
  } catch (error) {
    console.error('Email sending failed:', error);
    return {
      success: false,
      error: error.message,
      to: to
    };
  }
}

// Send emails to authorities
async function sendEmailsToAuthorities(caseData, scammerData, recipients) {
  const results = {};
  
  try {
    // Get email addresses from environment variables with fallbacks
    const telecomEmail = process.env.TELECOM_EMAIL || 'telecom@fraud.gov.in';
    const bankingEmail = process.env.BANKING_EMAIL || 'banking@fraud.gov.in';
    const nodalEmail = process.env.NODAL_EMAIL || 'nodal@fraud.gov.in';
    
    console.log('üìß Email addresses (with fallbacks):');
    console.log('  TELECOM_EMAIL:', telecomEmail);
    console.log('  BANKING_EMAIL:', bankingEmail);
    console.log('  NODAL_EMAIL:', nodalEmail);

    // Send to telecom authority
    if (recipients.telecom) {
      const telecomTemplate = emailTemplates.telecom;
      console.log('üìß Sending email to telecom:', telecomEmail);
      try {
        const telecomResult = await sendEmail(
          telecomEmail,
          telecomTemplate.subject,
          telecomTemplate.template(caseData, scammerData)
        );
        console.log('üìß Telecom email result:', telecomResult);
        results.telecom = {
          success: telecomResult.success,
          messageId: telecomResult.messageId,
          to: telecomResult.to,
          email: telecomEmail,
          status: telecomResult.success ? 'sent' : 'failed'
        };
      } catch (error) {
        console.error('‚ùå Telecom email error:', error);
        results.telecom = {
          success: false,
          error: error.message,
          email: telecomEmail,
          status: 'failed'
        };
      }
    }

    // Send to banking authority
    if (recipients.banking) {
      const bankingTemplate = emailTemplates.banking;
      console.log('üìß Sending email to banking:', bankingEmail);
      try {
        const bankingResult = await sendEmail(
          bankingEmail,
          bankingTemplate.subject,
          bankingTemplate.template(caseData, scammerData)
        );
        console.log('üìß Banking email result:', bankingResult);
        results.banking = {
          success: bankingResult.success,
          messageId: bankingResult.messageId,
          to: bankingResult.to,
          email: bankingEmail,
          status: bankingResult.success ? 'sent' : 'failed'
        };
      } catch (error) {
        console.error('‚ùå Banking email error:', error);
        results.banking = {
          success: false,
          error: error.message,
          email: bankingEmail,
          status: 'failed'
        };
      }
    }

    // Send to nodal officer
    if (recipients.nodal) {
      const nodalTemplate = emailTemplates.nodal;
      console.log('üìß Sending email to nodal:', nodalEmail);
      try {
        const nodalResult = await sendEmail(
          nodalEmail,
          nodalTemplate.subject,
          nodalTemplate.template(caseData, scammerData)
        );
        console.log('üìß Nodal email result:', nodalResult);
        results.nodal = {
          success: nodalResult.success,
          messageId: nodalResult.messageId,
          to: nodalResult.to,
          email: nodalEmail,
          status: nodalResult.success ? 'sent' : 'failed'
        };
      } catch (error) {
        console.error('‚ùå Nodal email error:', error);
        results.nodal = {
          success: false,
          error: error.message,
          email: nodalEmail,
          status: 'failed'
        };
      }
    }

    return results;
  } catch (error) {
    console.error('Error sending emails to authorities:', error);
    throw error;
  }
}

// Test email configuration
async function testEmailConfiguration() {
  try {
    await transporter.verify();
    console.log('‚úÖ Email configuration is valid');
    return true;
  } catch (error) {
    console.error('‚ùå Email configuration is invalid:', error);
    return false;
  }
}

module.exports = {
  sendEmail,
  sendEmailsToAuthorities,
  testEmailConfiguration,
  emailTemplates
};
